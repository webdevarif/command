@function hexToRgb($hex) {
   $r: red($hex);
   $g: green($hex);
   $b: blue($hex);
 
   @return $r, $g, $b;
}

@mixin printColorRgb($colorName) {
   $color: unquote("#{$colorName}");
   $rgbValues: hexToRgb($color);
 
   @debug "RGB values for #{$colorName}: #{$rgbValues}";
 }


//  SCSS SYNTAX
@mixin rtl($property, $ltr-value, $rtl-value) {
  #{$property}: $ltr-value;

  [dir=rtl] & {
    #{$property}: $rtl-value;
  }
}

// Define the breakpoint-infix function
@function breakpoint-infix($breakpoint, $breakpoints) {
  $index: index(map-keys($breakpoints), $breakpoint);
  @return if($index > 1, "-#{nth(map-keys($breakpoints), $index)}", '');
}

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include media-breakpoint-up(sm) {}
@mixin media-breakpoint-up($breakpoint) {

   // If the breakpoint exists in the map.
   @if map-has-key($grid-breakpoints, $breakpoint) {
 
     // Get the breakpoint value.
     $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
 
     // Write the media query.
     @media (min-width: $breakpoint-value) {
       @content;
     }
   
   // If the breakpoint doesn't exist in the map.
   } @else {
 
     // Log a warning.
     @warn 'Invalid breakpoint: #{$breakpoint}.';
   }
 }
 
 
 //
 //  RESPOND BELOW
 //––––––––––––––––––––––––––––––––––––––––––––––––––
 
 // @include media-breakpoint-down(sm) {}
 @mixin media-breakpoint-down($breakpoint) {
 
   // If the breakpoint exists in the map.
   @if map-has-key($grid-breakpoints, $breakpoint) {
 
     // Get the breakpoint value.
     $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
 
     // Write the media query.
     @media (max-width: ($breakpoint-value - 1)) {
       @content;
     }
   
   // If the breakpoint doesn't exist in the map.
   } @else {
 
     // Log a warning.
     @warn 'Invalid breakpoint: #{$breakpoint}.';
   }
 }
 
 
 //
 //  RESPOND BETWEEN
 //––––––––––––––––––––––––––––––––––––––––––––––––––
 
 // @include media-breakpoint-between(sm, md) {}
 @mixin media-breakpoint-between($lower, $upper) {
 
   // If both the lower and upper breakpoints exist in the map.
   @if map-has-key($grid-breakpoints, $lower) and map-has-key($grid-breakpoints, $upper) {
 
     // Get the lower and upper breakpoints.
     $lower-breakpoint: map-get($grid-breakpoints, $lower);
     $upper-breakpoint: map-get($grid-breakpoints, $upper);
 
     // Write the media query.
     @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
       @content;
     }
   
   // If one or both of the breakpoints don't exist.
   } @else {
 
     // If lower breakpoint is invalid.
     @if (map-has-key($grid-breakpoints, $lower) == false) {
 
       // Log a warning.
       @warn 'Your lower breakpoint was invalid: #{$lower}.';
     }
 
     // If upper breakpoint is invalid.
     @if (map-has-key($grid-breakpoints, $upper) == false) {
 
       // Log a warning.
       @warn 'Your upper breakpoint was invalid: #{$upper}.';
     }
   }
 }


// PLACEHOLDER
@mixin placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
 }
  
@mixin opacity($opacity) {//[@include opacity(.5);]
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// Toggle visibility + opacity + pointer-events
// @param {Boolean} $state - Switch visibility "on" `(true)` or "off" `(false)`. Defaults to `true`.
@mixin visible($isVisible: true) {
@if ($isVisible) {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
} @else {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
}
}
@mixin visually-hidden() {
    // sass-lint:disable no-important
    position: absolute !important;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
  }
  
  @mixin visually-shown() {
    // sass-lint:disable no-important
    position: inherit !important;
    overflow: auto;
    clip: auto;
    width: auto;
    height: auto;
    margin: 0;
  }
  
 
  @mixin CustomKeyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {@content;}
    @-moz-keyframes #{$animation-name} {@content;}
    @-o-keyframes #{$animation-name} {@content;}
    @keyframes #{$animation-name} {@content;}
 }
 
 @mixin keyframes_animation ($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    -o-animation: $args;
    animation: $args;
 }
 
 @mixin arrow ($direction, $size, $color) {
    @if $direction==up {
       border-left: $size solid transparent;
       border-right: $size solid transparent;
       border-bottom: $size solid $color;
    }
 
    @else if $direction==down {
       border-left: $size solid transparent;
       border-right: $size solid transparent;
       border-top: $size solid $color;
    }
 
    @else if $direction==right {
       border-top: $size solid transparent;
       border-bottom: $size solid transparent;
       border-left: $size solid $color;
    }
 
    @else if $direction==left {
       border-top: $size solid transparent;
       border-bottom: $size solid transparent;
       border-right: $size solid $color;
    }
 }
 @mixin overlay($color : $blakc, $opacity : 0.7, $zIndex: 0) {
    position: relative;
    z-index: $zIndex;
 
    @include after{
       @include position($top: 0, $left: 0, $zIndex: -1);
       @include size(100%);
       background-color: $color;
       @include opacity($opacity);      
    }
 }
 @mixin disable-selection() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
 }
 
 @mixin clearfix() {
    &:before,
    &:after {
       content: " "; // 1
       display: table; // 2
    }
    &:after {
       clear: both;
    }
 }